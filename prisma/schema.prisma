// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions       Transaction[]
  stockAdjustments   StockAdjustment[]
  approvedAdjustments StockAdjustment[] @relation("AdjustmentApprover")

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  OWNER
  MANAGER
  STAFF
}

// Permission Management
model Permission {
  id          String      @id @default(cuid())
  name        String      @unique // e.g., "dashboard.view", "pos.create", "products.delete"
  description String?     // Human readable description
  category    String      // Group permissions: "dashboard", "pos", "products", etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@map("role_permissions")
}

// Product Management
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Brand {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@map("brands")
}

model Size {
  id        String   @id @default(cuid())
  name      String   @unique // XS, S, M, L, XL, etc
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productVariants ProductVariant[]

  @@map("sizes")
}

model Color {
  id        String   @id @default(cuid())
  name      String   @unique
  hexCode   String?  // Color hex code
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productVariants ProductVariant[]

  @@map("colors")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  sku         String      @unique
  description String?
  season      Season?
  gender      Gender?
  categoryId  String
  brandId     String
  costPrice   Decimal     @db.Decimal(10, 2)
  sellingPrice Decimal    @db.Decimal(10, 2)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  brand    Brand    @relation(fields: [brandId], references: [id])
  variants ProductVariant[]
  transactionItems TransactionItem[]

  @@map("products")
}

enum Season {
  SPRING_SUMMER
  FALL_WINTER
  ALL_SEASON
}

enum Gender {
  MALE
  FEMALE
  UNISEX
  KIDS
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  sizeId      String
  colorId     String
  barcode     String?  @unique
  stock       Int      @default(0)
  minStock    Int      @default(5)
  costPrice   Float?   // Harga modal per variant, jika null maka gunakan harga produk
  sellingPrice Float?  // Harga jual per variant, jika null maka gunakan harga produk
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id])
  color   Color   @relation(fields: [colorId], references: [id])
  stockMovements StockMovement[]
  stockAdjustments StockAdjustment[]
  transactionItems TransactionItem[]

  @@unique([productId, sizeId, colorId])
  @@map("product_variants")
}

// Stock Management
model StockMovement {
  id        String            @id @default(cuid())
  variantId String
  type      StockMovementType
  quantity  Int
  reason    String?
  reference String? // Reference to transaction, adjustment, etc
  createdAt DateTime          @default(now())
  createdBy String?

  // Relations
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("stock_movements")
}

// Stock Adjustment with detailed audit trail
model StockAdjustment {
  id              String              @id @default(cuid())
  variantId       String
  adjustmentType  AdjustmentType
  reason          AdjustmentReason
  quantity        Int                 // Positive for increase, negative for decrease
  stockBefore     Int                 // Stock before adjustment
  stockAfter      Int                 // Stock after adjustment
  notes           String?
  reference       String?             // Reference ID (e.g., production batch, damage report)
  createdAt       DateTime            @default(now())
  createdBy       String              // User who made the adjustment
  approvedBy      String?             // For future approval workflow
  approvedAt      DateTime?

  // Relations
  variant         ProductVariant      @relation(fields: [variantId], references: [id])
  user            User                @relation(fields: [createdBy], references: [id])
  approver        User?               @relation("AdjustmentApprover", fields: [approvedBy], references: [id])

  @@map("stock_adjustments")
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum AdjustmentType {
  INCREASE
  DECREASE
}

enum AdjustmentReason {
  PRODUCTION          // Auto-create production record
  DAMAGE              // Items damaged/defective
  RETURN_TO_SUPPLIER  // Return to supplier
  RETURN_FROM_CUSTOMER // Customer return
  STOCK_OPNAME        // Physical count correction
  LOST_ITEMS          // Items lost/stolen
  SAMPLE_PROMOTION    // Given as sample/promotion
  DATA_CORRECTION     // Correction of input error
  FOUND_ITEMS         // Items found during inventory
  EXPIRED_ITEMS       // Items past expiration
  OTHER               // Other reasons (must provide notes)
}

// Supplier Management
model Supplier {
  id          String   @id @default(cuid())
  name        String
  contact     String?
  phone       String?
  email       String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transactions Transaction[]

  @@map("suppliers")
}

// Transaction Management
model Transaction {
  id            String          @id @default(cuid())
  type          TransactionType
  invoiceNumber String          @unique
  supplierId    String?
  userId        String
  totalAmount   Decimal         @db.Decimal(12, 2)
  notes         String?
  status        TransactionStatus @default(COMPLETED)
  transactionDate DateTime      @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  supplier Supplier? @relation(fields: [supplierId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  items    TransactionItem[]

  @@map("transactions")
}

enum TransactionType {
  SALE
  PURCHASE
  RETURN_SALE
  RETURN_PURCHASE
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model TransactionItem {
  id            String  @id @default(cuid())
  transactionId String
  productId     String
  variantId     String?
  quantity      Int
  unitPrice     Decimal @db.Decimal(10, 2)
  totalPrice    Decimal @db.Decimal(10, 2)

  // Relations
  transaction Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product        @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("transaction_items")
}

// Store Settings
model StoreSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("store_settings")
}
